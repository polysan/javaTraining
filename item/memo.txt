classにfinalをつけると、そのclassは継承されなくなる。
スーパークラスのメソッドがpublic以外の場合、メソッドのオーバライドでコンパイルエラーとなる。
「関数型インタフェース」は、抽象メソッドが1つだけ定義されているインタフェース。
関数型インターフェースの抽象メソッドのシグネチャと実行するメソッドのシグネチャが一致している場合はメソッド参照という書き方にすることができる
→list.forEach(System.out::println); (クラス::メソッド)

Supplier:引数を受け取らず戻り値を戻す → get
Consumer:引数を受け取り戻り値なし → accept
BIConsumer:引数を２つ受け取るConsumer 
Predicate:引数を受け取りbooleanを返す → test
Function:引数を受け取り戻り値を戻す → apply
         andthen → 順番処理
         compose → 逆順処理
BIFunction:引数を２つ受け取るFunction
UnaryOperator:引数を１つ受け取り同じ型の結果を戻す
			Functionを継承している
			引数と戻り値の型が同じ
BinaryOperator:引数を２つ受け取り同じ型の結果を戻す
				引数の型と戻り値の型が全て同じ

並行処理：シングルコアで処理を切替え、同時に処理してるように見える
並列処理：複数のコアで同時に処理する
同期化処理：複数のスレッドが並行して実行されるとき、スレッドの順番を制御する
スレッドプール：使い終わったスレッドを新たなスレッドに割り当てる仕組み→複数個の空のスレッドを最初に作っておく
Executorフレームワーク：スレッドプールを使って効率的に並行処理を実行するインターフェースとクラス群
newCachedThreadPool：60秒経ったら生成したスレッドは削除される
同期化処理：複数のスレッドが同時に進行しているときに処理の順番を制御すること
スレッドセーフ：排他制御され、競合やデッドロックなどが発生しないスレッド処理
Optional:メソッドの処理結果を扱うクラス
並列ストリーム：ストリームAPIをマルチスレッドで処理する
リダクション操作：一連の要素を一つにまとめる操作
ジェネリクス：そのクラスが扱うデータ型を実行時に決める仕組み
ジェネリクスの変性：非変性　→　サブクラスの代入を許さない（Object型をジェネリクスで指定したListにString型のListは代入できない）